@using System.Net.Http
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using VisualAlgorithms.Models
@using VisualAlgorithms.ViewModels

@inject NavigationManager NavigationManager

    <EditForm Model="QuestionModel">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="question">Вопрос: </label>
            <InputTextArea Id="question" Class="form-control" @bind-Value="QuestionModel.TestQuestion.Question" />
            <ValidationMessage For="@(() => QuestionModel.TestQuestion.Question)" />
        </div>
        <div class="form-group">
            <label for="questionType">Тип вопроса: </label>
            <InputSelect Id="questionType" Class="form-control" @bind-Value="QuestionModel.TestQuestion.TestQuestionType">
                <option value="@TestQuestionType.FreeAnswer">Со свободным ответом</option>
                <option value="@TestQuestionType.SelectAnswer">С выбором ответа</option>
            </InputSelect>
            <ValidationMessage For="@(() => QuestionModel.TestQuestion.TestQuestionType)" />
        </div>
        <div class="form-group">
            <label for="answer">Правильный ответ: </label>
            <InputText Id="answer" Class="form-control" @bind-Value="QuestionModel.TestAnswers[0].Answer" />
            <ValidationMessage For="@(() => QuestionModel.TestAnswers[0].Answer)" />
        </div>

        @if (QuestionModel.TestQuestion.TestQuestionType == TestQuestionType.SelectAnswer)
        {
            <div class="form-group">
                <label for="answersCount">Вариантов ответа: </label>
                <InputSelect Id="answerCount" Class="form-control" @bind-Value="AnswersCount">
                    @for (int i = 1; i < 10; i++)
                        {
                            var num = $"{i}";
                        <option value="@num">@num</option>
                        }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Варианты ответа: </label>

                @{
                    var count = int.Parse(AnswersCount);

                    for (int i = 0; i < count; i++)
                    {
                        var num = i + 1;
                        var labelName = $"answer{num}";
                        <div class="form-group">
                            <InputText Id="labelName" Class="form-control" @bind-Value="QuestionModel.TestAnswers[num].Answer" />
                            <ValidationMessage For="@(() => QuestionModel.TestAnswers[num].Answer)" />
                        </div>
                    }
                }
            </div>
        }

        <div class="form-group">
            <label for="isLastQuestion">
                <InputCheckbox Id="isLastQuestion" @bind-Value="QuestionModel.TestQuestion.IsLastQuestion" />
                Является последним вопросом в тесте
            </label>
        </div>
        <div class="form-group">
            <button @onclick="OnNextTestQuestionCreation" class="btn btn-primary">Далее</button>
        </div>
    </EditForm>

@code {
    [Parameter]
    public TestQuestionCreateViewModel QuestionModel { get; set; }

    private string AnswersCount { get; set; } = "1";

    private async Task OnNextTestQuestionCreation()
    {
        var model = JsonConvert.SerializeObject(QuestionModel);
        var content = new StringContent(model, Encoding.UTF8, "application/json");
        var client = new HttpClient {BaseAddress = new Uri("https://localhost:5001/")};
        var response = await client.PostAsync("api/TestQuestion/next", content);
        var responseResult = await response.Content.ReadAsStringAsync();

        NavigationManager.NavigateTo(QuestionModel.TestQuestion.IsLastQuestion 
            ? "https://localhost:5001/Admin/Tests" 
            : $"api/TestQuestion?testId={QuestionModel.TestQuestion.TestId}", 
            true);
    }
}