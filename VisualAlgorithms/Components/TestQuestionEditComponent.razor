@using System.IO
@using System.Net.Http
@using System.Text
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using VisualAlgorithms.Models
@using VisualAlgorithms.ViewModels
@using BlazorInputFile

@inject NavigationManager NavigationManager

<div class="question-container">
    <EditForm Model="QuestionModel" Class="col-6 main-form" OnValidSubmit="EditTestQuestion">
        <FluentValidator></FluentValidator>

        <div class="form-group">
            <label class="main-form-label">Вопрос</label>
            <textarea class="form-control" @bind="QuestionModel.TestQuestion.Question"></textarea>
            <div class="main-form-label text-danger">
                <ValidationMessage For="@(() => QuestionModel.TestQuestion.Question)"/>
            </div>
        </div>

        <div class="form-group">
            <label class="main-form-label">Тип вопроса</label>
            <select class="form-control" @onchange="HandleQuestionType">
                <option value="@TestQuestionType.FreeAnswer">Со свободным ответом</option>
                <option value="@TestQuestionType.SelectAnswer">С выбором ответа</option>
            </select>
        </div>

        @if (QuestionModel.TestQuestion.TestQuestionType == TestQuestionType.SelectAnswer)
        {
            <div class="form-group">
                <label class="main-form-label">Вариантов ответа</label>
                <select class="form-control" @onchange="HandleAnswersCount">
                    @for (var i = 2; i <= 10; i++)
                    {
                        var num = $"{i}";

                        if (i == _answersCount)
                        {
                            <option value="@num" selected="selected">@num</option>
                        }
                        else
                        {
                            <option value="@num">@num</option>
                        }

                    }
                </select>
            </div>
        }

        <div class="form-group">
            <label class="main-form-label">Правильный ответ</label>
            <input class="form-control" @bind="QuestionModel.TestAnswers[0].Answer"/>
            <div class="main-form-label text-danger">
                <ValidationMessage For="@(() => QuestionModel.TestAnswers[0].Answer)"/>
            </div>
        </div>

        @if (QuestionModel.TestQuestion.TestQuestionType == TestQuestionType.SelectAnswer)
        {
            <div class="form-group">
                <label class="main-form-label">Варианты ответа</label>
                @{
                    for (var i = 0; i < _answersCount - 1; i++)
                    {
                        var num = i + 1;

                        <div class="form-group">
                            <input class="form-control" @bind="QuestionModel.TestAnswers[num].Answer"/>
                            <div class="main-form-label text-danger">
                                <ValidationMessage For="@(() => QuestionModel.TestAnswers[num].Answer)"/>
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Готово</button>
        </div>
    </EditForm>

    <div class="question-img-container col-md-6">
        @if (!string.IsNullOrEmpty(_imageName))
        {
            <img class="test-img-bordered test-img-close" @onclick="ClearQuestionImage" src="images/test-questions/@_imageName" alt="img" />
        }
        else
        {
            <div class="drag-drop-zone text-center">
                <InputFile OnChange="HandleFile" />
                @_status
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public TestQuestionViewModel QuestionModel { get; set; }

    private const string DefaultStatus = "Загрузить изображение";
    private readonly HttpClient _client = new HttpClient {BaseAddress = new Uri("https://localhost:5001/")};
    private string _imageName;
    private int _answersCount = 1;
    private string _status = DefaultStatus;

    protected override void OnInitialized()
    {
        _imageName = QuestionModel.Image;
        _status = string.IsNullOrEmpty(_imageName) ? DefaultStatus : _imageName;
        _answersCount = QuestionModel.TestAnswers.Count;
    }

    private async Task EditTestQuestion()
    {
        QuestionModel.Image = _imageName;
        var model = JsonConvert.SerializeObject(QuestionModel);
        var content = new StringContent(model, Encoding.UTF8, "application/json");
        var response = await _client.PostAsync("api/tests/editQuestion", content);
        var responseResult = await response.Content.ReadAsStringAsync();
        var isSuccessed = JsonConvert.DeserializeObject<bool>(responseResult);

        if (isSuccessed)
            NavigationManager.NavigateTo($"Tests/Edit/{QuestionModel.TestQuestion.TestId}", true);
    }

    private void HandleAnswersCount(ChangeEventArgs e)
    {
        _answersCount = int.Parse(e.Value.ToString());

        while (QuestionModel.TestAnswers.Count != _answersCount)
        {
            if (_answersCount > QuestionModel.TestAnswers.Count)
                QuestionModel.TestAnswers.Add(new TestAnswer());
            else if (_answersCount < QuestionModel.TestAnswers.Count)
                QuestionModel.TestAnswers.RemoveAt(QuestionModel.TestAnswers.Count - 1);
        }
    }

    private void HandleQuestionType(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "FreeAnswer")
        {
            QuestionModel.TestQuestion.TestQuestionType = TestQuestionType.FreeAnswer;
            QuestionModel.TestAnswers.RemoveRange(1, QuestionModel.TestAnswers.Count - 1);
            _answersCount = 1;
        }
        else
        {
            QuestionModel.TestQuestion.TestQuestionType = TestQuestionType.SelectAnswer;
            QuestionModel.TestAnswers.Add(new TestAnswer());
            _answersCount = 2;
        }
    }

    private async Task HandleFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            await ClearQuestionImage();

            if (IsImage(file))
            {
                var stream = new MemoryStream();
                await file.Data.CopyToAsync(stream);
                var imageContent = new MultipartFormDataContent
                {
                    {new ByteArrayContent(stream.GetBuffer()), file.Name, file.Name}
                };

                var imageResponse = await _client.PostAsync("api/tests/uploadImg", imageContent);
                _imageName = await imageResponse.Content.ReadAsStringAsync();
                _status = _imageName;
            }
            else
            {
                _imageName = string.Empty;
                _status = "Данный формат не поддерживается! Выберите другое изображение";
            }
        }
    }

    private bool IsImage(IFileListEntry file)
    {
        var ext = Path.GetExtension(file.Name);
        return string.Compare(ext, ".png", StringComparison.Ordinal) == 0 ||
               string.Compare(ext, ".jpeg", StringComparison.Ordinal) == 0 ||
               string.Compare(ext, ".jpg", StringComparison.Ordinal) == 0;
    }

    private async Task ClearQuestionImage()
    {
        if (!string.IsNullOrEmpty(_imageName))
        {
            var content = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("fileName", _imageName)
            });

            await _client.PostAsync("api/tests/clearImg", content);
            _imageName = string.Empty;
            _status = DefaultStatus;
        }
    }
}